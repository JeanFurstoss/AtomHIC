#include <stdlib.h>
#include <iostream>
#include <sstream>
#include <string>
#include "Descriptors.h"
#include "SteinhardtDescriptors.h"
#include "GaussianMixtureModel.h"
#include "AtomicSystem.h"
#include <chrono>
#include <omp.h>

using namespace std;
using namespace std::chrono;

int main(int argc, char *argv[])
{
	if( argc != 4 && argc != 5 ){
		cerr << "Usage: ./IdentifyGrains AtomicInputFilename NumberOfGrains StructOfCrystalFilename OldCentroids_Filename(optional)" << endl;
		cerr << "AtomicInputFilename should be an atomic system containing the Struct field (generated by GMMClassification exec for instance)" << endl;
		cerr << "StructOfCrystalFilename is a file containing the indexes of in the Struct field corresponding to crystal (e.g. perfect crystal, dislocations)" << endl;
		cerr << "The executable returns Grains_AtomicInputFilename ovito.cfg file containing containing a GrainId field" << endl;
		cerr << "OldCentroids_Filenamle must contain the centroid of grains in order to have the same index of grain from one file to an other" << endl;
		cerr << "For the moment ions cannot be filtered" << endl;
		return EXIT_FAILURE;
	}
	
	cout << "Calculation running using " << omp_get_max_threads() << " threads" << endl;
	
	auto start = high_resolution_clock::now();

	string InputFilename = argv[1];
	unsigned int nb_grains, idPC;
	istringstream iss_nbg(argv[2]);
	iss_nbg >> nb_grains;
	string FilenameStruct(argv[3]);
	vector<unsigned int> Struct_crystal;
	unsigned int buffer_uint;
	string line;
        ifstream file_e2t(FilenameStruct, ifstream::in); 
        if( file_e2t ){                                                              
                while(getline(file_e2t,line)){                                       
                        istringstream text(line); 
			text >> buffer_uint;
			Struct_crystal.push_back(buffer_uint);
		}
	}else{
		cerr << "The file " << FilenameStruct << " cannot be opened, aborting" << endl;
		exit(EXIT_FAILURE);
	}

	if( argc == 5 ){
		string OldCentroidsFilename = argv[4];
	}

	AtomicSystem MySystem(InputFilename);
	unsigned int Struct_ind, size_Struct;
	Struct_ind = MySystem.getAuxIdAndSize("Struct",size_Struct);
	
	unsigned int nbAt = MySystem.getNbAtom();
	unsigned int nbAt_PC = 0;

	cout << "0" << endl;
	double *auxGT = new double[nbAt];	
	
	for(unsigned int i=0;i<nbAt;i++){
		bool crystal = false;
		for(unsigned int t=0;t<Struct_crystal.size();t++){
			if( (unsigned int) MySystem.getAux(Struct_ind)[i*size_Struct] == Struct_crystal[t] ){
				crystal = true;
				nbAt_PC += 1;
				auxGT[i] = 1; // write one for the moment
				break;
			}
		}
		if( !crystal ) auxGT[i] = 0.;
	}

	double *pos = new double[nbAt_PC*3];
	unsigned int *corres_array = new unsigned int[nbAt_PC];
	unsigned int count = 0;
	cout << "1" << endl;
	cout << nbAt_PC << endl;
	for(unsigned int i=0;i<nbAt;i++){
		if( auxGT[i] == 1 ){
			corres_array[count] = i;
			pos[count*3] = MySystem.getAtom(i).pos.x;
			pos[count*3+1] = MySystem.getAtom(i).pos.y;
			pos[count*3+2] = MySystem.getAtom(i).pos.z;
			//cout << count << endl;
			count++;

		}
	}
	cout << "2" << endl;

	Descriptors MyDes(pos,nbAt_PC,3);
	GaussianMixtureModel GMM;
	GMM.setDescriptors(&MyDes);
	cout << "3" << endl;
	unsigned int zero = 0;
	GMM.TrainModel(nb_grains,zero);
	GMM.Classify();

	for(unsigned int i=0;i<nbAt_PC;i++){
		auxGT[corres_array[i]] = GMM.getClassificator()[i*2]+1;
	}

	MySystem.setAux_vec(auxGT,1,"grainId");
	
	string suf = "Grains_";
	string OutputFilename = suf+InputFilename;
	
	MySystem.printSystem_aux(OutputFilename,"grainId");

	delete[] pos;
	delete[] corres_array;
	delete[] auxGT;
}
